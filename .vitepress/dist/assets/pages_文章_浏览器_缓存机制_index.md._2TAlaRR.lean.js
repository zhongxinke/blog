import{_ as i,c as a,a2 as o,o as t}from"./chunks/framework.GXDt-Def.js";const h=JSON.parse('{"title":"缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"pages/文章/浏览器/缓存机制/index.md","filePath":"pages/文章/浏览器/缓存机制/index.md"}'),l={name:"pages/文章/浏览器/缓存机制/index.md"};function r(p,e,n,d,s,c){return t(),a("div",null,e[0]||(e[0]=[o('<h1 id="缓存机制" tabindex="-1">缓存机制 <a class="header-anchor" href="#缓存机制" aria-label="Permalink to &quot;缓存机制&quot;">​</a></h1><h2 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h2><p>浏览器缓存是为了节约网络资源加速浏览，浏览器通过在本地磁盘或者内存将访问过的请求资源进行存储。 当用户下次访问时，可以在磁盘或内存直接获取，提高加载速度</p><h2 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-label="Permalink to &quot;缓存策略&quot;">​</a></h2><p>浏览器缓存策略分：强缓存和协商缓存</p><p><strong>强缓存</strong></p><p>强缓存是浏览器根据服务器返回的响应头Expires和Cache-Control规则来决定是否从缓存读取内容</p><ul><li>Expires</li></ul><p>Exipres是HTTP/1.0的网页缓存字段，它表示请求结果缓存的到期时间，当客户端时间小于Exipres时间，就返回缓存结果</p><ul><li>Cache-Control</li></ul><p>Cache-Control是HTTP/1.1的字段，Expires可能因为客户端和服务器的时间不同步导致判断失效，所以出现了根据相对时间来判断更有效，<code>Cache-Control: max-age=86400</code>这里的86400表示的秒数，表示超过86400s后重新请求数据。</p><p>那么强缓存生效后，缓存到了哪里？</p><ol><li>Memory Cache 内存缓存</li></ol><ul><li>缓存持续时间短：关闭进程后缓存释放</li><li>小型资源：体积较小的资源更有可能被缓存到内存中，因为内存的读写速度比磁盘快，可以提升性能。</li></ul><ol start="2"><li>Disk Cache 磁盘缓存</li></ol><ul><li>持续时间长</li><li>大型资源</li></ul><p><em>*Cache-Control优先级高于Expires</em></p><p><strong>协商缓存</strong></p><p>当强缓存失效时，才会使用协商缓存。协商缓存是有服务器根据缓存标识来决定是否使用缓存</p><ul><li>Last-Modified/if-Modified-Since</li></ul><p>Last-Modified: 返回该资源文件在服务器最后的修改时间 if-Modified-Since: 上一次请求返回的Last-Modified</p><p>服务器接收请求后，发现携带if-Modified-Since标识，就会拿if-Modified-Since的值和该文件在服务器最后修改时间比较，当服务器最后修改时间大于f-Modified-Since的值，返回最新的资源，状态码为200。否则状态码为304，表示可以继续使用缓存文件</p><ul><li>Etag/if-None-Match</li></ul><p>Etag: 表示资源文件的唯一标识 if-None-Match: 上一次请求的Etag</p><p>服务器接收请求后，发现携带if-None-Match标识，就会拿if-None-Match的值与该文件在服务器的Etag比较，一致则返回状态码304，表示可以继续使用缓存，不一致则返回状态码200，返回最新的资源。</p><p><em>*Etag优先级高于Last-Modified</em></p>',26)]))}const u=i(l,[["render",r]]);export{h as __pageData,u as default};
