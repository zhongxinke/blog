import{_ as e,c as t,a1 as i,o}from"./chunks/framework.clinZALv.js";const m=JSON.parse('{"title":"微信小程序授权、登录流程","description":"","frontmatter":{},"headers":[],"relativePath":"pages/文章/微信小程序/授权流程/index.md","filePath":"pages/文章/微信小程序/授权流程/index.md"}'),l={name:"pages/文章/微信小程序/授权流程/index.md"};function n(r,a,s,d,c,h){return o(),t("div",null,a[0]||(a[0]=[i('<h1 id="微信小程序授权、登录流程" tabindex="-1">微信小程序授权、登录流程 <a class="header-anchor" href="#微信小程序授权、登录流程" aria-label="Permalink to &quot;微信小程序授权、登录流程&quot;">​</a></h1><h2 id="登录流程" tabindex="-1">登录流程 <a class="header-anchor" href="#登录流程" aria-label="Permalink to &quot;登录流程&quot;">​</a></h2><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt="登录流程"><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ol><li>进入小程序时，调用wx.login()接口获取临时登录凭证code。</li><li>将code发送到服务器，服务器通过auth.code2session()接口换取用户唯一标识OpenID、用户在微信开放平台账号下的唯一标识UnionID（若当前小程序已绑定到微信开放平台账号）和会话密钥session_key</li><li>之后服务器可以通过用户标识来生成自定义的登录态（如：Token），并将登录态返回给小程序。</li><li>客户端获取到登录态后，将登录态保存在本地，在后续接口请求中可以携带登录态</li></ol><h2 id="授权流程" tabindex="-1">授权流程 <a class="header-anchor" href="#授权流程" aria-label="Permalink to &quot;授权流程&quot;">​</a></h2><img src="http://zhongxk.com/blogImg/小程序授权流程.png" alt="授权流程"><h3 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ol><li>使用wx.getSettin()获取用户的授权设置。</li><li>如果用户已授权，则直接调用相应的接口，否则使用wx.authorize()接口发起授权请求。</li><li>授权请求成功，调用相应的接口，否则提示用户打开设置界面，引导用户开启授权，使用wx.openSetting()接口打开设置界面。</li></ol>',9)]))}const x=e(l,[["render",n]]);export{m as __pageData,x as default};
